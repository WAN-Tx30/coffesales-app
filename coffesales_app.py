# -*- coding: utf-8 -*-
"""coffesales-app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ElbGWCMuTRY8ZysHXMUtgt7SUF9sfs5s
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

url = "https://drive.google.com/uc?id=1cnzXzPrShReziNp7B1hQ9HURVu9drGGF"
df = pd.read_csv(url)
#https://drive.google.com/file/d/1cnzXzPrShReziNp7B1hQ9HURVu9drGGF/view?usp=sharing

df.head()

df.info()

"""#Data Preprocessing"""

from sklearn.model_selection import train_test_split
# Asumsi 'df' adalah DataFrame 'Coffe_sales.csv' yang sudah dimuat

# 1. Tentukan fitur (X) dan label (y)
# Kita pilih fitur yang sudah numerik saja untuk contoh ini
features = ['hour_of_day', 'Weekdaysort', 'Monthsort']
X = df[features]

# Label (target) yang ingin diprediksi adalah 'money' (pengganti 'Sales')
y = df['money']

# 2. Lakukan train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# (Opsional) Anda bisa memeriksa hasilnya
# print("X_train shape:", X_train.shape)
# print("y_train shape:", y_train.shape)
# print("X_test shape:", X_test.shape)
# print("y_test shape:", y_test.shape)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"Mean Absolute Error: {mae}")
print(f"R-squared: {r2}")

"""# Model Inference"""

from sklearn.preprocessing import StandardScaler
# Minta input yang sesuai dengan data 'Coffe_sales.csv'
# (Menggantikan TV, Radio, Newspaper)
hour = int(input("Masukkan jam (mis: 10): "))
weekday_sort = int(input("Masukkan urutan hari (1-7): "))
month_sort = int(input("Masukkan urutan bulan (1-12): "))

# Buat data baru dalam bentuk dictionary (disesuaikan)
data_baru = {
    'hour_of_day': hour,
    'Weekdaysort': weekday_sort,
    'Monthsort': month_sort
}

# Buat DataFrame dari data baru
new_df = pd.DataFrame([data_baru])
print(f"Data baru yang akan diprediksi:\n{new_df}\n")

# Define cols_to_scale with the feature columns
cols_to_scale = ['hour_of_day', 'Weekdaysort', 'Monthsort']

# Fit a new scaler on the training data and transform the new data
scaler = StandardScaler()
scaler.fit(X_train[cols_to_scale]) # Fit on training data features
new_df[cols_to_scale] = scaler.transform(new_df[cols_to_scale])

# Pastikan urutan kolom sesuai dengan data training 'X' (though already handled by using X.columns for the scaler fit)
new_df = new_df[X.columns]


print(f"Data baru setelah preprocessing (scaling):\n{new_df}\n")

# Lakukan prediksi (menggantikan 'prediksi_charges')
prediksi_money = rf.predict(new_df)

# Tampilkan hasil (menggantikan 'Sales Revenue')
print("-" * 30)
print(f"Hasil Prediksi Harga (Money): ${prediksi_money[0]:.2f}")
print("-" * 30)

import joblib

# Export the trained model
filename = 'rf_model.joblib'
joblib.dump(rf, filename)

print(f"Model exported successfully as {filename}")

import joblib

# (Asumsi 'scaler' dan 'rf' adalah objek yang sudah dilatih)

# 1. Export scaler (Sesuai permintaan Anda)
scaler_filename = 'scaler_coffee.joblib'
joblib.dump(scaler, scaler_filename)
print(f"Scaler berhasil diekspor sebagai {scaler_filename}")

# 2. Export model (Menggantikan 'encoders' dengan 'rf')
model_filename = 'model_rf_coffee.joblib'
joblib.dump(rf, model_filename)
print(f"Model (rf) berhasil diekspor sebagai {model_filename}")